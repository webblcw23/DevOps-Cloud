trigger: none  # disables CI trigger

schedules:
  - cron: "0 9 * * 1"  # Every Monday at 9am UTC
    displayName: Weekly Rangers Infra Check
    always: true
    branches:
      include:
        - main  # or whatever your default branch is


pool:
  vmImage: "ubuntu-latest"

variables:
  ACR_NAME: "rangers-docker-acr"
  IMAGE_NAME: "rangersapp"
  DOCKER_IMAGE: "$(ACR_NAME).azurecr.io/$(IMAGE_NAME):latest"

steps:
  - task: DotNetCoreCLI@2
    displayName: "Restore RangersApp"
    inputs:
      command: "restore"
      projects: "RangersApp/Rangers.Web.csproj"

  - task: DotNetCoreCLI@2
    displayName: "Build RangersApp"
    inputs:
      command: "build"
      projects: "RangersApp/Rangers.Web.csproj"
      arguments: "--configuration Release"

  - task: DotNetCoreCLI@2
    displayName: "Test RangersApp"
    inputs:
      command: "test"
      projects: "RangersApp/Rangers.Web.csproj"

  # Python section required for scraping the most recent scores using my scrape_scores.py script within the Data folder.

  - task: UsePythonVersion@0
    displayName: "Setting Python Version"
    inputs:
      versionSpec: "3.10" # Use the Python 3.10 version
      addToPath: true

  - script: |
      python -m venv venv
      source venv/bin/active
      pip install pandas
      python Data/scrape_scores.py
    displayName: "Run Python Script to Scrape Scores"
    workingDirectory: "RangersApp"

  - script: |
      echo "Fixtures now updated to latest"
     

  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: "RangersApp/Data/rangers-results.json"
      artifactName: "rangers-results"

  - task: Docker@2
    displayName: "Build and Push Docker Image"
    inputs:
      containerRegistry: "rangers-docker-acr" # My custom set service connection name
      repository: "$(IMAGE_NAME)"
      command: "buildAndPush"
      tags: |
        latest

  - task: TerraformInstaller@1
    displayName: "Install Terraform"
    inputs:
      terraformVersion: "1.7.5" # or whatever version you prefer

  #- task: AzureCLI@2
  # displayName: 'Inject Terraform Auth Env Vars'
  #  inputs:
  #    azureSubscription: 'rangers-acr-service-connection'
  #    scriptType: 'bash'
  #    scriptLocation: 'inlineScript'
  #    inlineScript: |
  #      echo "##vso[task.setvariable variable=ARM_CLIENT_ID]$servicePrincipalId"
  #      echo "##vso[task.setvariable variable=ARM_CLIENT_SECRET]$servicePrincipalKey"
  #      echo "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID]$subscriptionId"
  #      echo "##vso[task.setvariable variable=ARM_TENANT_ID]$tenantId"

  - script: |
      echo "Client ID: $ARM_CLIENT_ID"
      echo "Tenant ID: $ARM_TENANT_ID"
    displayName: "Debug Env Vars"
    env:
      ARM_CLIENT_ID: $(ARM_CLIENT_ID)
      ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
      ARM_TENANT_ID: $(ARM_TENANT_ID)

  - script: |
      terraform import azurerm_resource_group.rg /subscriptions/91c0fe80-4528-4bf2-9796-5d0f2a250518/resourceGroups/rg-rangers-app
    displayName: 'Import Existing Resource Group'

  - script: |
      terraform init
      terraform plan \
      -out=tfplan.out \
        -var="client_id=$ARM_CLIENT_ID" \
        -var="client_secret=$ARM_CLIENT_SECRET" \
        -var="subscription_id=$ARM_SUBSCRIPTION_ID" \
        -var="tenant_id=$ARM_TENANT_ID"
    displayName: "Terraform Init and Plan"
    workingDirectory: "RangersApp/terraform"
    env:
      ARM_CLIENT_ID: $(ARM_CLIENT_ID)
      ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
      ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
      ARM_TENANT_ID: $(ARM_TENANT_ID)

  - publish: RangersApp/terraform/tfplan.out
    displayName: "Publish Terraform Plan"
    artifact: terraform-plan

  - script: |
      terraform apply -auto-approve tfplan.out
    displayName: "Terraform Apply"
    workingDirectory: "RangersApp/terraform"
    env:
      ARM_CLIENT_ID: $(ARM_CLIENT_ID)
      ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
      ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
      ARM_TENANT_ID: $(ARM_TENANT_ID)
