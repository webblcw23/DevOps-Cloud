trigger: none  # disables CI trigger

schedules:
  - cron: "0 9 * * 1"  # Every Monday at 9am UTC
    displayName: Weekly Rangers Infra Check
    always: true
    branches:
      include:
        - main

pool:
  vmImage: "ubuntu-latest"

variables:
  ACR_NAME: "rangers-docker-acr"
  IMAGE_NAME: "rangersapp"
  DOCKER_IMAGE: "$(ACR_NAME).azurecr.io/$(IMAGE_NAME):latest"
  #ARM_CLIENT_ID: $(ARM_CLIENT_ID)
  #ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
  #ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
  #ARM_TENANT_ID: $(ARM_TENANT_ID)

steps:
  # .NET Build & Test
  - task: DotNetCoreCLI@2
    displayName: "Restore RangersApp"
    inputs:
      command: "restore"
      projects: "RangersApp/Rangers.Web.csproj"

  - task: DotNetCoreCLI@2
    displayName: "Build RangersApp"
    inputs:
      command: "build"
      projects: "RangersApp/Rangers.Web.csproj"
      arguments: "--configuration Release"

  - task: DotNetCoreCLI@2
    displayName: "Test RangersApp"
    inputs:
      command: "test"
      projects: "RangersApp/Rangers.Web.csproj"

  # Python Script for Scraping Scores
  - task: UsePythonVersion@0
    displayName: "Setting Python Version"
    inputs:
      versionSpec: "3.10"
      addToPath: true

  - script: |
      python -m venv venv
      source venv/bin/activate
      pip install pandas
      python Data/scrape_scores.py
    displayName: "Run Python Script to Scrape Scores"
    workingDirectory: "RangersApp"

  - script: echo "Fixtures now updated to latest"
    displayName: "Confirm Score Update"

  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: "RangersApp/Data/rangers-results.json"
      artifactName: "rangers-results"

  # Docker Build & Push
  - task: Docker@2
    displayName: "Build and Push Docker Image"
    inputs:
      containerRegistry: "rangers-docker-acr"
      repository: "$(IMAGE_NAME)"
      command: "buildAndPush"
      tags: |
        latest

  - task: AzureCLI@2
    inputs:
      azureSubscription: 'rangers-acr-service-connection'
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |
        az account show      

  # Terraform Setup
  - task: TerraformInstaller@1
    displayName: "Install Terraform"
    inputs:
      terraformVersion: "1.7.5"

  - script: terraform init -reconfigure
    displayName: "Terraform Init"
    workingDirectory: "RangersApp/terraform"

  - script: terraform validate
    displayName: "Terraform Validate"
    workingDirectory: "RangersApp/terraform"

  - script: |
      echo "Client ID is: $(ARM_CLIENT_ID)"
      echo "ARM TENENT ID is: $(ARM_TENANT_ID)"
      echo "ARM SUB ID is: $(ARM_SUBSCRIPTION_ID)"
    displayName: "Check Vars"

  - script: |
      terraform plan \
        -out=tfplan.out \
        -var="client_id=$ARM_CLIENT_ID" \
        -var="client_secret=$ARM_CLIENT_SECRET" \
        -var="subscription_id=$ARM_SUBSCRIPTION_ID" \
        -var="tenant_id=$ARM_TENANT_ID"
    displayName: "Terraform Plan"
    workingDirectory: "RangersApp/terraform"
    env:
      ARM_CLIENT_ID: $(ARM_CLIENT_ID)
      ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
      ARM_TENANT_ID: $(ARM_TENANT_ID)
      ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)


  - publish: RangersApp/terraform/tfplan.out
    displayName: "Publish Terraform Plan"
    artifact: terraform-plan

  - script: terraform apply -auto-approve tfplan.out
    displayName: "Terraform Apply"
    workingDirectory: "RangersApp/terraform"
    env:
      ARM_CLIENT_ID: $(ARM_CLIENT_ID)
      ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
      ARM_TENANT_ID: $(ARM_TENANT_ID)
      ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)


  - task: AzureCLI@2
    displayName: "Restart Rangers Web App"
    inputs:
      azureSubscription: "rangers-acr-service-connection"
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |
        az webapp restart \
        --name rangers-webapp \
        --resource-group rg-rangers-app

